// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: clerk.proto

package clerk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClerkService_GetClerks_FullMethodName           = "/clerk.ClerkService/GetClerks"
	ClerkService_GetClaims_FullMethodName           = "/clerk.ClerkService/GetClaims"
	ClerkService_GetClientsFromClerk_FullMethodName = "/clerk.ClerkService/GetClientsFromClerk"
	ClerkService_GetAdminsFromClerk_FullMethodName  = "/clerk.ClerkService/GetAdminsFromClerk"
)

// ClerkServiceClient is the client API for ClerkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClerkServiceClient interface {
	GetClerks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Clerk], error)
	GetClaims(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClaimResponse, error)
	GetClientsFromClerk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClientResponse], error)
	GetAdminsFromClerk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AdminResponse], error)
}

type clerkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClerkServiceClient(cc grpc.ClientConnInterface) ClerkServiceClient {
	return &clerkServiceClient{cc}
}

func (c *clerkServiceClient) GetClerks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Clerk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClerkService_ServiceDesc.Streams[0], ClerkService_GetClerks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, Clerk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClerkService_GetClerksClient = grpc.ServerStreamingClient[Clerk]

func (c *clerkServiceClient) GetClaims(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClaimResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimResponse)
	err := c.cc.Invoke(ctx, ClerkService_GetClaims_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkServiceClient) GetClientsFromClerk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClientResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClerkService_ServiceDesc.Streams[1], ClerkService_GetClientsFromClerk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, ClientResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClerkService_GetClientsFromClerkClient = grpc.ServerStreamingClient[ClientResponse]

func (c *clerkServiceClient) GetAdminsFromClerk(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AdminResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClerkService_ServiceDesc.Streams[2], ClerkService_GetAdminsFromClerk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, AdminResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClerkService_GetAdminsFromClerkClient = grpc.ServerStreamingClient[AdminResponse]

// ClerkServiceServer is the server API for ClerkService service.
// All implementations must embed UnimplementedClerkServiceServer
// for forward compatibility.
type ClerkServiceServer interface {
	GetClerks(*EmptyRequest, grpc.ServerStreamingServer[Clerk]) error
	GetClaims(context.Context, *EmptyRequest) (*ClaimResponse, error)
	GetClientsFromClerk(*EmptyRequest, grpc.ServerStreamingServer[ClientResponse]) error
	GetAdminsFromClerk(*EmptyRequest, grpc.ServerStreamingServer[AdminResponse]) error
	mustEmbedUnimplementedClerkServiceServer()
}

// UnimplementedClerkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClerkServiceServer struct{}

func (UnimplementedClerkServiceServer) GetClerks(*EmptyRequest, grpc.ServerStreamingServer[Clerk]) error {
	return status.Errorf(codes.Unimplemented, "method GetClerks not implemented")
}
func (UnimplementedClerkServiceServer) GetClaims(context.Context, *EmptyRequest) (*ClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaims not implemented")
}
func (UnimplementedClerkServiceServer) GetClientsFromClerk(*EmptyRequest, grpc.ServerStreamingServer[ClientResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetClientsFromClerk not implemented")
}
func (UnimplementedClerkServiceServer) GetAdminsFromClerk(*EmptyRequest, grpc.ServerStreamingServer[AdminResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAdminsFromClerk not implemented")
}
func (UnimplementedClerkServiceServer) mustEmbedUnimplementedClerkServiceServer() {}
func (UnimplementedClerkServiceServer) testEmbeddedByValue()                      {}

// UnsafeClerkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClerkServiceServer will
// result in compilation errors.
type UnsafeClerkServiceServer interface {
	mustEmbedUnimplementedClerkServiceServer()
}

func RegisterClerkServiceServer(s grpc.ServiceRegistrar, srv ClerkServiceServer) {
	// If the following call pancis, it indicates UnimplementedClerkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClerkService_ServiceDesc, srv)
}

func _ClerkService_GetClerks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClerkServiceServer).GetClerks(m, &grpc.GenericServerStream[EmptyRequest, Clerk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClerkService_GetClerksServer = grpc.ServerStreamingServer[Clerk]

func _ClerkService_GetClaims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkServiceServer).GetClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkService_GetClaims_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkServiceServer).GetClaims(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkService_GetClientsFromClerk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClerkServiceServer).GetClientsFromClerk(m, &grpc.GenericServerStream[EmptyRequest, ClientResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClerkService_GetClientsFromClerkServer = grpc.ServerStreamingServer[ClientResponse]

func _ClerkService_GetAdminsFromClerk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClerkServiceServer).GetAdminsFromClerk(m, &grpc.GenericServerStream[EmptyRequest, AdminResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClerkService_GetAdminsFromClerkServer = grpc.ServerStreamingServer[AdminResponse]

// ClerkService_ServiceDesc is the grpc.ServiceDesc for ClerkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClerkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clerk.ClerkService",
	HandlerType: (*ClerkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClaims",
			Handler:    _ClerkService_GetClaims_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClerks",
			Handler:       _ClerkService_GetClerks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetClientsFromClerk",
			Handler:       _ClerkService_GetClientsFromClerk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAdminsFromClerk",
			Handler:       _ClerkService_GetAdminsFromClerk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clerk.proto",
}
