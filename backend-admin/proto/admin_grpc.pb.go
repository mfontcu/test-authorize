// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_GetAdmins_FullMethodName           = "/admin.AdminService/GetAdmins"
	AdminService_GetClaims_FullMethodName           = "/admin.AdminService/GetClaims"
	AdminService_GetClientsFromAdmin_FullMethodName = "/admin.AdminService/GetClientsFromAdmin"
	AdminService_GetClerksFromAdmin_FullMethodName  = "/admin.AdminService/GetClerksFromAdmin"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	GetAdmins(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Admin], error)
	GetClaims(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClaimResponse, error)
	GetClientsFromAdmin(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClientResponse], error)
	GetClerksFromAdmin(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClerkResponse], error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) GetAdmins(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Admin], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[0], AdminService_GetAdmins_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, Admin]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_GetAdminsClient = grpc.ServerStreamingClient[Admin]

func (c *adminServiceClient) GetClaims(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClaimResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimResponse)
	err := c.cc.Invoke(ctx, AdminService_GetClaims_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetClientsFromAdmin(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClientResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[1], AdminService_GetClientsFromAdmin_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, ClientResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_GetClientsFromAdminClient = grpc.ServerStreamingClient[ClientResponse]

func (c *adminServiceClient) GetClerksFromAdmin(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClerkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[2], AdminService_GetClerksFromAdmin_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, ClerkResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_GetClerksFromAdminClient = grpc.ServerStreamingClient[ClerkResponse]

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	GetAdmins(*EmptyRequest, grpc.ServerStreamingServer[Admin]) error
	GetClaims(context.Context, *EmptyRequest) (*ClaimResponse, error)
	GetClientsFromAdmin(*EmptyRequest, grpc.ServerStreamingServer[ClientResponse]) error
	GetClerksFromAdmin(*EmptyRequest, grpc.ServerStreamingServer[ClerkResponse]) error
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) GetAdmins(*EmptyRequest, grpc.ServerStreamingServer[Admin]) error {
	return status.Errorf(codes.Unimplemented, "method GetAdmins not implemented")
}
func (UnimplementedAdminServiceServer) GetClaims(context.Context, *EmptyRequest) (*ClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaims not implemented")
}
func (UnimplementedAdminServiceServer) GetClientsFromAdmin(*EmptyRequest, grpc.ServerStreamingServer[ClientResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetClientsFromAdmin not implemented")
}
func (UnimplementedAdminServiceServer) GetClerksFromAdmin(*EmptyRequest, grpc.ServerStreamingServer[ClerkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetClerksFromAdmin not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_GetAdmins_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).GetAdmins(m, &grpc.GenericServerStream[EmptyRequest, Admin]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_GetAdminsServer = grpc.ServerStreamingServer[Admin]

func _AdminService_GetClaims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetClaims_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetClaims(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetClientsFromAdmin_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).GetClientsFromAdmin(m, &grpc.GenericServerStream[EmptyRequest, ClientResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_GetClientsFromAdminServer = grpc.ServerStreamingServer[ClientResponse]

func _AdminService_GetClerksFromAdmin_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).GetClerksFromAdmin(m, &grpc.GenericServerStream[EmptyRequest, ClerkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_GetClerksFromAdminServer = grpc.ServerStreamingServer[ClerkResponse]

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClaims",
			Handler:    _AdminService_GetClaims_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAdmins",
			Handler:       _AdminService_GetAdmins_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetClientsFromAdmin",
			Handler:       _AdminService_GetClientsFromAdmin_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetClerksFromAdmin",
			Handler:       _AdminService_GetClerksFromAdmin_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}
